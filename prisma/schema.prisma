// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Base {
    id        String   @id @default(cuid())
    name      String   @default("Untitled Base")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    lastOpened DateTime @default(now())

    createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
    createdById String

    tables     Table[]

    @@index([createdById])
    @@index([lastOpened])
    @@index([createdById, lastOpened(sort: Desc)])
}

model Table {
    id        String   @id @default(cuid())
    name      String   @default("Untitled Table")
    order     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    base     Base   @relation(fields: [baseId], references: [id], onDelete: Cascade)
    baseId   String

    views    View[]
    rows     TableRow[]
    columns  TableColumn[]
    cells    TableCell[]

    @@index([baseId])
    @@index([baseId, order])
}

model TableColumn {
    id        String   @id @default(cuid())
    name      String   @default("Untitled Column")
    type      String   @default("text")
    order     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    table    Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId  String

    cells    TableCell[]

    @@index([tableId])
    @@index([tableId, order])
}

model TableRow {
    id        String   @id @default(cuid())
    order     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    table    Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId  String

    cells    TableCell[]

    // Per-view manual row ordering
    viewOrders ViewRowOrder[]

    @@index([tableId])
    @@index([tableId, order])
}

model TableCell {
    id        String   @id @default(cuid())
    value     String   @default("")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    table     Table      @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId   String
    row       TableRow   @relation(fields: [rowId], references: [id], onDelete: Cascade)
    rowId     String
    column    TableColumn @relation(fields: [columnId], references: [id], onDelete: Cascade)
    columnId  String

    @@unique([tableId, rowId, columnId])
    @@index([tableId])
    @@index([rowId])
    @@index([columnId])
}

model View {
    id        String   @id @default(cuid())
    name      String   @default("Grid view")
    type      String   @default("grid")
    order     Int      @default(0)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    table    Table  @relation(fields: [tableId], references: [id], onDelete: Cascade)
    tableId  String

    // Optional generic config JSON for future (hidden columns, etc.)
    config   Json?

    // Per-view hidden fields
    hiddenFields String[] @default([])

    // Per-view persistent rules
    sortRules   ViewSortRule[]
    filterRules ViewFilterRule[]

    // Per-view manual row ordering
    rowOrders ViewRowOrder[]

    @@index([tableId])
    @@index([tableId, order])
}

model ViewRowOrder {
    viewId   String
    rowId    String
    position Int

    view View     @relation(fields: [viewId], references: [id], onDelete: Cascade)
    row  TableRow @relation(fields: [rowId], references: [id], onDelete: Cascade)

    @@id([viewId, rowId])
    @@index([viewId, position])
}

model ViewSortRule {
    id        String @id @default(cuid())
    viewId    String
    columnId  String
    direction String // "asc" | "desc"
    order     Int

    view View @relation(fields: [viewId], references: [id], onDelete: Cascade)

    @@index([viewId, order])
    @@index([viewId, columnId])
}

model ViewFilterRule {
    id        String @id @default(cuid())
    viewId    String
    columnId  String
    operator  String // e.g. contains | does not contain | is | is not | is empty | is not empty
    value     String
    order     Int

    view View @relation(fields: [viewId], references: [id], onDelete: Cascade)

    @@index([viewId, order])
    @@index([viewId, columnId])
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    bases         Base[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
